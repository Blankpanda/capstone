names(stats.Combined) <- c("ms", "index", "status")
library(jsonlite)
library(ggplot2)
pingStats <- fromJSON("bin/Debug/google.com_0.json")
statusStats <- fromJSON("bin/Debug/status_google.com_0.json")
stats <- data.frame(pingStats) # convert the data to a data.frame
status <- data.frame(statusStats)
stats.index <- data.frame(1:length(pingStats)) # new row to bind to stats
stats.Combined <- cbind(stats,stats.index)
stats.Combined <- cbind(stats.Combined,status)
names(stats.Combined) <- c("ms", "index", "status")
plot <- ggplot(stats.Combined, aes(x = index ,
xmin =index,
y = ms ,
ymin = ms + 75
)) +
ggtitle("Ping stats for: ") +
geom_area(size = 1 , fill = "white" , alpha = 0) +
geom_point(mapping=aes(color = status)) +
geom_line()
plot
stats.index <- data.frame(1:length(pingStats)) # new row to bind to stats
source('~/Visual Studio 2013/Projects/CS/PingStats/PingStats/GraphJson.R')
source('~/Senior Capstone Project/src/tools/vis.R', echo=TRUE)
args=(commandArgs(TRUE))
setwd("~/Senior Capstone Project/res/MNIST data/")
#input the CSV files
train <- read.csv("train.csv", header = TRUE )
# get 300 values from the train data set.
ShortDataSet <- train[ 1 :300,]
write.csv(MyData, file = "Short.csv")
args=(commandArgs(TRUE))
setwd("~/Senior Capstone Project/res/MNIST data/")
#input the CSV files
train <- read.csv("train.csv", header = TRUE )
# get 300 values from the train data set.
ShortDataSet <- train[ 1 :300,]
write.csv(ShortDataSet, file = "Short.csv")
fsd
fadsf
dsa
fasd
fas
df
asd
a
a
fdas
fas
f
ad
fas
fas
a
f
args=(commandArgs(TRUE))
setwd("~/Senior Capstone Project/res/MNIST data/")
args
#input the CSV files
train <- read.csv("train.csv", header = TRUE )
# get 300 values from the train data set.
ShortDataSet <- train[ 1 :300,]
write.csv(ShortDataSet, file = "Short.csv")
# Accepts a list of arguements and that takes a csv file and truncates it to a set size.
# currently only set to ~/Senior Capstone Project/res/MNIST data
args=(commandArgs(TRUE))
setwd("~/Senior Capstone Project/res/MNIST data/")
if (length(args)==0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
}
if ("--help" %in% args) {
cat("
Usage:
RScript --vanilla [in] | [trunc] | [out]
in - the file that were truncating
trunc - the ammount were trunacting to
out - the file that is saved.
")
}
#input the CSV files
train <- read.csv(args[0], header = TRUE )
# get 300 values from the train data set.
ShortDataSet <- train[ 1 :as.numeric(args[1]),]
write.csv(ShortDataSet, file = args[2])
args <- commandArgs(TRUE)
test
args <- commandArgs(TRUE)
print (args[0])
print (args[1])
getwd()
# Accepts a list of arguements and that takes a csv file and truncates it to a set size.
# currently only set to ~/Senior Capstone Project/res/MNIST data
setwd("~/Senior Capstone Project/res/MNIST data/")
args <- commandArgs(TRUE)
infile <- args[0]
trunc <- args[1]
outfile <- args[2]
if (length(args)==0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
}
if ("--help" %in% args) {
cat("
Usage:
RScript --vanilla [in] | [trunc] | [out]
in - the file that were truncating
trunc - the ammount were trunacting to
out - the file that is saved.
")
}
rm(args)
#input the CSV files
train <- read.csv(infile, header = TRUE)
# get 300 values from the train data set.
ShortDataSet <- train[ 1 :as.numeric(trunc),]
write.csv(ShortDataSet, file =  outfile)
train <- read.csv(file = infile, header = TRUE)
train <- read.csv(file = infile, header = TRUE)
print(infile)
options(echo = TRUE)
print(args[0])
